import java.io.*;
import java.util.Arrays;


public class DNSHeader {
    private byte[] ID_, QDCOUNT_, NSCOUNT_, ARCOUNT_;
    private short ANCOUNT_;
    private int flags_, QR_, OpCode_, AA_, TC_, RD_, RA_, Z_, AD_, CD_, RCODE_;

    /* Read the header from an input stream;
       we'll use a ByteArrayInputStream, but we will only use the basic read methods
       of input stream to read 1 byte, or to fill in a byte array, so we'll be generic */
    public static DNSHeader decodeHeader(InputStream inputStream) throws IOException {
        DNSHeader dnsHeader = new DNSHeader();
        dnsHeader.ID_ = inputStream.readNBytes(2); // reads 2 bytes
        dnsHeader.flags_ = inputStream.read(); // reads 1 byte
        dnsHeader.QR_ = (dnsHeader.flags_ & 0b10000000) >>> 7;
//        System.out.print("QR: ");
//        System.out.printf("%2X", QR_);
//        System.out.println();
        dnsHeader.OpCode_ = (dnsHeader.flags_ & 0b01111000) >>> 3;
//        System.out.print("Opcode: ");
//        System.out.printf("%2X", OpCode_);
//        System.out.println();
        dnsHeader.AA_ = (dnsHeader.flags_ & 0b00000100) >>> 2;
//        System.out.print("AA: ");
//        System.out.printf("%2X", AA_);
//        System.out.println();
        dnsHeader.TC_ = (dnsHeader.flags_ & 0b00000010) >>> 1;
//        System.out.print("TC: ");
//        System.out.printf("%2X", TC_);
//        System.out.println();
        dnsHeader.RD_ = (dnsHeader.flags_ & 0b00000001);
//        System.out.print("RD: ");
//        System.out.printf("%2X", RD_);
//        System.out.println();

        dnsHeader.flags_ = inputStream.read(); // reads 1 byte
        dnsHeader.RA_ = (dnsHeader.flags_ & 0b10000000) >>> 7;
//        System.out.print("RA: ");
//        System.out.printf("%2X", RA_);
//        System.out.println();
        dnsHeader.Z_ = (dnsHeader.flags_ & 0b01000000) >>> 6;
//        System.out.print("Z: ");
//        System.out.printf("%2X", Z_);
//        System.out.println();
        dnsHeader.AD_ = (dnsHeader.flags_ & 0b00100000) >>> 5;
//        System.out.print("AD: ");
//        System.out.printf("%2X", AD_);
//        System.out.println();
        dnsHeader.CD_ = (dnsHeader.flags_ & 0b00010000) >>> 4;
//        System.out.print("CD: ");
//        System.out.printf("%2X", CD_);
//        System.out.println();
        dnsHeader.RCODE_ = (dnsHeader.flags_ & 0b00001111);
//        System.out.print("RCODE: ");
//        System.out.printf("%2X", RCODE_);
//        System.out.println();

        dnsHeader.QDCOUNT_ = inputStream.readNBytes(2); // reads 2 bytes
//        System.out.print("QDCOUNT: ");
//        System.out.printf("%2X", QDCOUNT_[0] + QDCOUNT_[1]);
//        System.out.println();
        byte anCountByte1 = inputStream.readNBytes(1)[0];
        byte anCountByte2 = inputStream.readNBytes(1)[0];
        dnsHeader.ANCOUNT_ = (byte)((anCountByte1 << 8) | (anCountByte2 & 0xFF));

//        System.out.print("ANCOUNT: ");
//        System.out.printf("%2X", ANCOUNT_[0] + ANCOUNT_[1]);
//        System.out.println();
        dnsHeader.NSCOUNT_ = inputStream.readNBytes(2); // reads 2 bytes
//        System.out.print("NSCOUNT: ");
//        System.out.printf("%2X", NSCOUNT_[0] + NSCOUNT_[1]);
//        System.out.println();
        dnsHeader.ARCOUNT_ = inputStream.readNBytes(2); // reads 2 bytes
//        System.out.print("ARCOUNT: ");
//        System.out.printf("%2X", ARCOUNT_[0] + ARCOUNT_[1]);
//        System.out.println();

        return dnsHeader;
    }

    /* This will create the header for the response.
    It will copy some fields from the request */
    public static DNSHeader buildHeaderForResponse(DNSMessage request) throws IOException {
        DNSHeader responseHeader = request.getHeader();
        responseHeader.QR_ = 1; // This indicates that the message is a response
//        responseHeader.RA_ = 0x01;
//        responseHeader.Z_ = 0x00;
        responseHeader.ANCOUNT_ = 1;
        return responseHeader;
    }

    /* Encode the header to bytes to be sent back to the client
    The OutputStream interface has methods to write a single byte or an array of bytes. */
    public void writeBytes(ByteArrayOutputStream outputStream) {
        outputStream.writeBytes(ID_);
        outputStream.write((byte)(QR_ << 7 | OpCode_ << 3 | AA_ << 2 | TC_ << 1 | RD_));
        outputStream.write((byte)(RA_ << 7 | Z_ << 6 | AD_ << 5 | CD_ << 4 | RCODE_));
        outputStream.writeBytes(QDCOUNT_);
        byte anCountByte1 = (byte)(ANCOUNT_ >>> 8);
        byte anCountByte2 = (byte)(ANCOUNT_);
        outputStream.write(anCountByte1);
        outputStream.write(anCountByte2);
        outputStream.writeBytes(NSCOUNT_);
        outputStream.writeBytes(ARCOUNT_);
    }

    /* Return a human-readable string version of a header object
     * A reasonable implementation can be autogenerated by your IDE. */
    @Override
    public String toString(){
        return "DNSHeader: " + "\n" +
                "\t" + "ID: " + Arrays.toString(ID_) + "\n" +
                "\t" + "QR: " + QR_ + "\n" +
                "\t" + "OpCode: " + OpCode_ + "\n" +
                "\t" + "AA: " + AA_ + "\n" +
                "\t" + "TC: " + TC_ + "\n" +
                "\t" + "RD: " + RD_ + "\n" +
                "\t" + "RA: " + RA_ + "\n" +
                "\t" + "Z: " + Z_ + "\n" +
                "\t" + "AD: " + AD_ + "\n" +
                "\t" + "CD: " + CD_ + "\n" +
                "\t" + "RCODE: " + RCODE_ + "\n" +
                "\t" + "QDCOUNT_: " + Arrays.toString(QDCOUNT_) + "\n" +
                "\t" + "ANCOUNT_: " + ANCOUNT_ + "\n" +
                "\t" + "NSCOUNT_: " + Arrays.toString(NSCOUNT_) + "\n" +
                "\t" + "ARCOUNT_: " + Arrays.toString(ARCOUNT_) + "\n";

    }

    /* Getters */
    public int getQuestionCount(){
        int answer = 0;
        for (byte b : QDCOUNT_) {
            answer = (answer << 8) + (b & 0xff);
        }
        return answer;
    }
    public int getAnswerCount(){
        return ANCOUNT_;
    }

    public int getAuthorityCount(){
        int authority = 0;
        for (byte b : NSCOUNT_) {
            authority = (authority << 8) + (b & 0xff);
        }
        return authority;
    }

    public int getAdditionalCount(){
        int additional = 0;
        for (byte b : ARCOUNT_) {
            additional = (additional << 8) + (b & 0xff);
        }
        return additional;
    }

    private static byte[] intToBytes(int data) {
        return new byte[] {
                (byte)((data >> 24) & 0xff),
                (byte)((data >> 16) & 0xff),
                (byte)((data >> 8) & 0xff),
                (byte)((data) & 0xff),
        };
    }

    public int getQR(){
        return QR_;
    }
}
